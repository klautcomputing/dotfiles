let mapleader="\<space>"
let g:mapleader="\<space>"

" vim-go
map <leader>n :cnext<CR>
map <leader>m :cprev<CR>
nnoremap <leader>a :cclose<CR>
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>t  <Plug>(go-test)
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
let g:go_list_type = "quickfix"
let g:go_test_timeout = '30s'

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
let g:go_fmt_autosave = 0
let g:go_fmt_command = "goimports"
let g:go_fmt_fail_silently = 1
"let g:go_addtags_transform = "camelcase"
let g:go_highlight_fields = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_types = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_build_constraints = 1

autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=2 shiftwidth=2

" multiple cursors
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'


" fix Cnext and friends
cabbrev cnext Cnext
cabbrev cprev Cprev
cabbrev cprevious Cprev
cabbrev lnext Lnext
cabbrev lprevious Lprev
cabbrev lprev Lprev

command! Cnext try | cnext | catch | cfirst | catch | endtry
command! Cprev try | cprev | catch | clast | catch | endtry
command! Lnext try | lnext | catch | lfirst | catch | endtry
command! Lprev try | lprev | catch | llast | catch | endtry

" " Toggles are mapped to <leader>t<something>

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " NEO Keyboard Layout (http://neo-layout.org/)

" " In NEO we can remap hjkl, because there are arrow keys in the middle of the
" " keyboard already.
" " Additionally we have: üöäß

" " h: Highlight current word, selection, autohighlight
" nnoremap <silent> <expr> h HighlightCurrentWord()
" vnoremap <silent> h :<C-U>call HighlightSelection()<CR>:set hlsearch<CR>
" " toggle automatic highlighting on/off.
" nnoremap <Leader>th :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>

" " j: jump to mark
" nnoremap j `
" vnoremap j `
" " jump to tag (for example in help files)
" nnoremap <leader>j <C-]>

" " k: (nothing yet)
" nnoremap K zg  " add current word to spellfile
" vnoremap k <Nop>
" nnoremap k 1z= " insert best suggestion misspelled word
" nnoremap <C-h> ]s " next misspelled word
" nnoremap <C-k> [s " prev misspelled word

" tab: next/prev buffer
nnoremap <silent> <leader>l :bnext<CR>
vnoremap <silent> <leader>l :bnext<CR>
nnoremap <silent> <leader>h :bprevious<CR>
vnoremap <silent> <leader>h :bprevious<CR>
" move lines
nnoremap <c-j> :m .+1<CR>==
nnoremap <c-k> :m .-2<CR>==
inoremap <c-j> <Esc>:m .+1<CR>==gi
inoremap <c-k> <Esc>:m .-2<CR>==gi
vnoremap <c-j> :m '>+1<CR>gv=gv
vnoremap <c-k> :m '<-2<CR>gv=gv

nmap <C-n> :call HighlightCurrentWord()<CR>:!redraw<CR>:call multiple_cursors#new("n",1)<CR>

" " make Y behave like D and C, yanking till end of line
map Y y$

" " FZF: Fuzzy file finding
nmap <leader>e :ProjectFiles<CR>
nmap <leader>E :GitFiles<CR>
nmap <leader>r :History<CR>
nmap <leader>L :Locate<space>
" nmap <leader>t :BTags<CR>
nmap <leader>t :Tags<CR>
nmap <leader>a :Ag<space>

" " Copy to clipboard
vnoremap  <leader>y  "+y
nnoremap  <leader>Y  "+yg_
nnoremap  <leader>y  "+y
nnoremap  <leader>yy  "+yy

" " Paste from clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P

" " efficient one-button save/close bindings
" nnoremap ö :update<CR>
" vnoremap ö <esc>:update<CR>gv
" nnoremap Ö :SudoWrite<CR>
" vnoremap Ö <esc>:SudoWrite<CR>gv
" nnoremap <Leader>ö :update<CR>
" nnoremap ä :q<CR>
" vnoremap ä <esc>:q<CR>
" nnoremap Ä :q!<CR>
" vnoremap Ä <esc>:q!<CR>
" nnoremap ü :bd<CR>
" vnoremap ü <esc>:bd<CR>
" nnoremap Ü :bd!<CR>
" vnoremap Ü <esc>:bd!<CR>
" nnoremap <Leader>ü :BufOnly<CR>
" vnoremap <Leader>ü <esc>:BufOnly<CR>gv

" " replay q/f macro
" " ß is on the right side next to q
" " Q was ex mode
" nnoremap ß @q
" vnoremap ß @q
" nnoremap Q @f
" vnoremap Q @f

" " Smart way to move between windows, adjusted for NEO
" " in insert mode
" imap ∫ <C-o><C-W>h
" imap ∀ <C-o><C-W>j
" imap Λ <C-o><C-W>k
" imap ∃ <C-o><C-W>l
" " in other modes
" map ∫ <C-W>h
" map ∀ <C-W>j
" map Λ <C-W>k
" map ∃ <C-W>l

" " Smart way to move between tabs, adjusted for NEO
" " in insert mode
" " imap √ <C-o>:tabprev<cr>
" " imap ℂ <C-o>:tabnext<cr>
" " in other modes
" " map √ :tabprev<cr>
" " map ℂ :tabnext<cr>

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " Fix some vim annoyances

" " TODO: imap <C-r>+ <C-o>"+p


" " paste over rest of line
" nnoremap <Leader>p v$<Left>p
" " TODO: paste over text objects

" " don't overwrite register when pasting over selection
" vnoremap p pgvy

" " don't lose selection when indenting
" vnoremap < <gv
" vnoremap > >gv
" vnoremap = =gv

" " search backwards with backslash
" nmap \ ?
" vmap \ ?

" " delete/edit whole word backwards
" " (can confilict with multiple cursors)
" nnoremap db xdb
" nnoremap cb xcb

" " smart home
" noremap <expr> <silent> <Home> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'
" imap <silent> <Home> <C-O><Home>

" " exit insert mode when navigating
" inoremap  <Left>   <Esc>
" inoremap  <Right>  <Esc>2<Right>
" inoremap  <Up>     <Esc><Up>
" inoremap  <Down>   <Esc><Down>
" imap  <Home>   <Esc><Home>
" imap  <End>    <Esc><End>

" " navigate through wrapped lines
" nnoremap <C-Up> g<Up>
" nnoremap <C-Down> g<Down>
" vnoremap <C-Up> g<Up>
" vnoremap <C-Down> g<Down>

" nnoremap <C-Home> g<Home>
" nnoremap <C-End> g<End>
" vnoremap <C-Home> g<Home>
" vnoremap <C-End> g<End>

" inoremap <C-Up> <Esc>g<Up>
" inoremap <C-Down> <Esc>g<Down>
" inoremap <C-Left> <Esc><C-Left>
" inoremap <C-Right> <Esc><Right><C-Right>

" " remap unused vim commands
" nnoremap go <C-o>  " original: jump to the n-th byte in the file



" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " custom bindings

" " back to hjkl
" nnoremap <Leader>vj :Johannes<CR>

" " insert TODO
" inoremap <C-t> // TODO:<space>

" " jump to m-mark
" " M was: place cursor in the center of screen
" " now I can hit mm to mark something quickly
" nnoremap M `m

" " fast way to edit ~/.vimrc*, reload, install plugins
" nnoremap <Leader>vv :e ~/.vimrc<CR>
" nnoremap <Leader>vp :e ~/.vimrc_plugins<CR>
" nnoremap <Leader>vpi :source ~/.vimrc_plugins<CR>:PlugInstall<CR>:source ~/.vimrc_plugins<CR>
" nnoremap <Leader>vk :e ~/.vimrc_keybindings<CR>
" nnoremap <Leader>vkr :source ~/.vimrc_keybindings<CR>
" nnoremap <Leader>vs :e ~/.vimrc_statusline<CR>
" nnoremap <Leader>vc :e ~/.vimrc_custom<CR>
" nnoremap <Leader>vr :source ~/.vimrc<CR>
" nnoremap <Leader>vz :e ~/.zshrc<CR>
" nnoremap <Leader>va :e ~/.sh_aliases<CR>

" " clear search highlighting
" nnoremap <silent> <Leader><Leader> :nohlsearch<CR>
" nnoremap <silent> <Leader>/ :nohlsearch<CR>

" " TODO: highlight all matches before starting multiple-cursors

" " location navigation
" nnoremap <leader>n :lnext<CR>
" nnoremap <leader>N :lprev<CR>

" " toggle local spell checking
" nnoremap <leader>ts :setlocal spell! spell?<CR>
" " insert best suggestion for last misspelled word
" inoremap <c-s> <c-g>u<Esc>[s1z=`]a<c-g>u
" nnoremap <c-s> 1z=

" " toggle chars at end of line
" nmap <silent> <Leader>; <Plug>ToggleEndChar;
" nmap <silent> <Leader>, <Plug>ToggleEndChar,
" nmap <silent> <Leader>. <Plug>ToggleEndChar.

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " Plugins


" " Git
" nmap <leader>gn <Plug>GitGutterNextHunk
" nmap <leader>gN <Plug>GitGutterPrevHunk
" nmap <leader>ga <Plug>GitGutterStageHunk
" nmap <leader>gu <Plug>GitGutterStageHunk
" nmap <leader>gr <Plug>GitGutterRevertHunk

" if has('nvim')
"     nmap <leader>gs :term tig status<CR>
" else
"     nmap <leader>gs :silent !tig status<CR>:GitGutterAll<CR>:redraw!<CR>
" endif

" " Emmet
" " nmap <C-e> <Plug>(emmet-expand-abbr)
" " imap <C-e> <Plug>(emmet-expand-abbr)

" " LatexBox
" vmap <Leader>le <Plug>LatexWrapSelection
" vmap <buffer>lo <Plug>LatexEnvWrapSelection

" " Autoformat
" nmap <leader>f :Autoformat<CR>

" " toggle distraction free writing
" nnoremap <silent> <leader>tg :Goyo<CR>

" " smooth scrolling (Plugin vim-smooth-scroll)
" noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
" noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
" noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
" noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>
" noremap <silent> <PageUp> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
" noremap <silent> <PageDown> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>

" " vim-schlepp visual movement
" vmap <S-up>    <Plug>SchleppUp
" vmap <S-down>  <Plug>SchleppDown
" vmap <S-left>  <Plug>SchleppLeft
" vmap <S-right> <Plug>SchleppRight
" nmap <S-up>    <S-v><Plug>SchleppUp
" nmap <S-down>  <S-v><Plug>SchleppDown
" nmap <S-left>  <S-v><Plug>SchleppLeft
" nmap <S-right> <S-v><Plug>SchleppRight

" incsearch plugin
map /  <Plug>(incsearch-forward)
map \  <Plug>(incsearch-backward)
map ?  <Plug>(incsearch-backward)
